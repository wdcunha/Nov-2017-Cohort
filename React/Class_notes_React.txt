package.json has settings for the project like the name
README.md is a great guide for using React
index.html is in public folder and we rarely work on it
index.js is in the src folder with some imports lines



1) apm install language-javascript-jsx          (globally)
2) apm install language-babel                   (globally)
   can be done inside atom (settings/install)   (globally)
3) npm install -g create-react-app              (globally)
4) sudo npm install -g create-react-app         (globally)
5) create-react-app awesome-answers-react \  create-react-app amazon-app-react
6) go to the directory created (in this case: awesome-answers-react)
7) npm start
8) deleted some files on src folder
9) index.js changed
   deleted line with app
   added components for the folder where is app.js
10) created code to show some content in the index page from awesome (question)
    method QuestionDetails()
    it need to be inside a tag div
11) we can define in package.json a port for the server
    "start": "PORT=4545react-scripts start",
12) created a method to show what had done
    QuestionShowPage()
13) created App method to enclose all of previous code
    without creating elements in html file
14) added props to make it dinamically
    set up author equal empty object in case null
15) QuestionShowPage addded
    when passing string, put inside {}
    when passing object, {{}}
16) added Field to treat fields to generalize (reuse)
17) like in rails, it has  modules using import to use it
    *limited browser support (maybe chrome and firefox)
    *not use directly in node, but inside module
    *
18) created a directory to isolate the components
    added file App.js and all components need to have the same name
    import react in the first line

19) created file QuestionShowPage.js and all content put there
20) created file QuestionDetails.js
21) created file AnswerDetails.js
22) created Field.js
23) inseted line in index js
    import App from .... (app will call every other methods)
    import in all files where has dependence
24) adding some style
    starting in QuestionShowPage
    added style inside in double {}
25) added in QuestionDetails a const for style
26) added set for AnswerDetails in css
27) created a directory data
    *it received data for now until reach a DB
28) created some files
    QuestionIndexPage.js
    added import for data
29) added import inside app.js
30) added div and calling for QuestionIndexPage inside app.js
31) inserted AnswerList.js component file
32) added code in QuestionShowPage to provide code from AnswerList
33)
34)



Success! Created awesome-answers-react at /home/wellington/CodeCore/Nov-2017-Cohort/React/awesome-answers-react
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you canâ€™t go back!

We suggest that you begin by typing:

  cd awesome-answers-react
  npm start



>>>>>>>>>>  refactoring components

1) changed line import react putting component
2) changed functions to class extends Component
   included render - needs to wrap all the code from former function
3) added constructor for classes
   added super to call tools from Component that is parent
   added inside const state:  this.state.question
   done the same for QuestionIndexPage
4) react developer tools chrome (intalled on chrome)
   it gives a react tab inside inpector (F12) where is possible to make changes opening items from state on there
5) link below is reference for code of many reacts events
    https://reactjs.org/docs/events.html
6) added in QuestionIndexPage code to delete questions index
   onClick event
   created method deleteQuestion
   setState added inseted of using pop method that causes buch issues (this will just take delete action in front end side)
   when we assign a method for a variable, it's gone, so need to add line to assign it for a variable with bind (inside state)
   to take the id, used event as argument in the method deleteQuestion
   added data-id to take it for deleting the line
   filter returns a copy of the array
   currentTarget is a string, so need to be parsed
7) added delete for question in QuestionShowPage
8) added delete for answer in QuestionShowPage
   button goes in AnswerDetails
   the trick is how to do the component communicate in the middle of the others
   a) put button in AnswerDetails
   b) used props.onDeleteClick
      the value we will pass into delete button is a function
   c) added a const to support line above
   d) in AnswerList call onDeleteClick bellow AnswerDetails call
   e) added const to support line above
   f) added onAnswerDeleteClick inside tag AnswerList in the QuestionShowPage
   g) added method deleteAnswer
   h) added line with bindin inside constructor to load it
      bind is used because it returns a callback
   i)




>>>>>>>>>>

1) created QuestionForm.js in components folder
   added code to show a form
2) added line to import QuestionForm in QuestionIndexPage
3) added code in QuestionIndexPage below question title
  <QuestionForm
  onSubmit={() => {console.log('Test!')}}
  />
4) added addQuestion in QuestionIndexPage as callback
  inserted line call inside constructor
  everything done until here is saved in the state
5) QuestionForm edited
   react treat the same line for differents models of browsers
6) QuestionIndexPage added newQuestion: {} inside constructor
   - added attribute for QuestionForm tag above title Question:           onSubmit={this.addQuestion}

..... (update)
7) added method updateNewQuestion
   line of handleChange edited of QuestionForm
8) divs  QuestionForm
9) added question variable inside const on QuestionForm method
10) QuestionIndexPage added line on QuestionForm: question newQuestion
11) const added for render
12) inizializing fi elds on this.state
13) addQuestion edited
    added line for updateNewQuestion in constructor
14) added new file currentdatetime
    added componentDidMount to keep updating the date
    added componentWillUnmount to remove
15) app.js added line for currentdatetime

........
0) copied api_key and const from awesome_answer_spa
   created folder requests
   pasted in
1) put {} for question in QuestionShowPage
    deleted line that import data from file
    added loading
2) npm install react-router-dom
3) set navigation bar
   app.js added line for import router
   changed lines for calling QuestionIndexPage and QuestionShowPage
4) added new file NavBar.js

5) edited CurrentDateTime
19) added line with const params in QuestionShowPage inside componentDidMount
20) added link_to inside <li> in QuestionIndexPage
21) added import link in QuestionIndexPage



>>>>  new form

1) duplicate QuestionIndexPage for QuestionNewPage
   edited to leave just what needed to the form
2) edited app.js
   added line for route newQuestion
   took out all loading statement
3) added link to in NavBar
4) amended in QuestionForm input for textarea
5) cleaned a bunch of lines about update and addQuestion
   lines with Link and Field
   QuestionForm line
6) removed Link from app.js import line




>>>>>>  JWT (Json Web Tokens)
> Primaly used for authentication

1) run this command in awesome folder:
  rails g controller Api::V1::Tokens --no-assets --no-helper --skip-template-engine
  need to inherit from Api::ApplicationController (in tokens_controller)
  the same for products_controller (need to inherit from Api::)
2) created line for tokens and question inside namespace v1 in routes (awesome)
   gem 'jwt'
   bundle
3) postman and created tokens tab
   used post and url: http://localhost:3000/api/v1/tokens
   added in Headers Content-Type application/json
   in body:
   {
    	"email": "js@winterfell.gov",
    	"password": "supersecret"
    }
4) added code for authentication in TokensController
   method create for authenticate and in fail
   tested on postman
   select JSON(application/json) insted of text (if it happens)
5) added code for  private encode_token method
   used code that has secret.yml as base
   added line inside create method
   tested on postman
   took code and go to
6) added code for revoke in 24hr
   added line inside create in jwt
7) added code in ApplicationController
   before_action :authenticate_user! (moved to QuestionsController Api)
   in private
   current_user
   tested in postman in Question Index
   and put API_KEY (User.first.api_key) and the key taken from RAILS C
   added JWT as second line of authentication on postman Question Index taken from Create Token tab
   * one authorization select at a time

   _______ react side _______
8) created file tokens.js in resquest folder in awesome_answer_react
   added const Token
9) created file config.js
   cut BASE_URL from question.js
   added line instead: import {BASE_URL} from './config';
   pasted in config.js
10) added line in App.js
    added import SignInPage
    added line inside Switch for poiting to SignInPage
    localStorage used to get jwt (can be seen in inspector/application)
11) added file SignInPage.js for login
    created a method to createToken
12) added line in NavBar to show option for sign_in


>>>>> High Order Component
* a way to inherit a behavior from a component
* AuthRote

1) created new file in components:
   AuthRoute.js
2) added line to import AuthRote in App.js
   added new line for route in QuestionNewPage line
   changed from function to class
   created constructor
   created componentDidMount
   created isAuth
3) npm install jwt-decode
4) added jwtDecode in app.js
   added Component in the first line of import
   refactored all route
   added const user below render

5) added in NavBar a line with user const

6) question.js created function for getting jwt instead API_KEY
   changed all calling for api_key




>>>> signIn and signOut

1) lines added to NavBar
   - included onSignOutClick
   - added code inside user ?
2) lines added to app.js
   - added loading to this.state and line to signout
   - added method signout
   - added line to signIn method to solve problem when refreshing the page
   - added loading in const user inside render and if statement
   - added signOut in NavBar tag after user in line 86





>>>> errors methods messages

1) change lines in routes in awesome answers inside namespace api
   - used match to work with 'via' (allows get/post)
2) Api ApplicationController in awesome answer
   - added method not_found
   - tested on postman
      - QuestionShow amended jwt
   - added line rescue_from
   - added methods in protected section

1) added nil .test in QuestionsController api
2) ApplicationController api added rescue_from StandardError
   - added method standard_error in protected
3) changed code create inside QuestionsController api to simulate an error
   - in the line question.save!, bang is necessary to not have crash

1) added in ApplicationController api rescue_from record_invalid
2) added method record_invalid in protected
3) tested in postman in QuestionCreate
   - first taken  jwt from QuestionShow to run it

content above used after putting binding.pry inside record_invalid:
error
error.record.errors.map { |f| f }
=> [:title]
error.record.errors.map { |f, m| m }
=> ["has already been taken"]


>>>> json api (react side)
http://jsonapi.org/
* help to write code for json, saving time
http://jsonapi-rb.org/

1) in app.js, added a plain Route to simulate error
2) added file NotFoundPage.js
3) created file HomePage.js
4) added line in app.js for import HomePage
5) added line inside Switch for component HomePage

>>>>

1) in QuestionNewPage, changed .then line in createQuestion:
   - put line for error validation in this.state
   -
2) added variable in render together newQuestion
3) added attribute errors inside QuestionForm tag
4) added errors in const from QuestionForm file
5) included const for renderError before render
6) added line for renderError in return after first div
7) created component FormErrors.js


>>> refactoring the way pages are organized

1) created folder pages
2) created file index.js
3) moved every pages to folder pages
4) in app.js, edited line import NotFoundPage
   *enough point the folder, nor the file name
5)






\\bump
